"script": "node server.js", //npm start
"server": "nodemon server.js" //npm run server

app.listen() in Express is like telling your app to start listening for visitors on a specific address and port, much like how Node listens for connections. 
The app, created by `express()`, is just a handy function that handles different types of requests, making it easy to serve both HTTP and HTTPS versions of your app without extra complexity.


// ALL ABOUT MORGAN PACKAGE
Morgan is another HTTP request logger middleware for Node. js. It simplifies the process of logging requests to your application.
The Morgan package in the MERN (MongoDB, Express.js, React, Node.js) stack is actually a middleware for Express.js. It helps with logging HTTP requests, making it easier to debug and analyze server-side activities. 
Morgan logs information about incoming requests, such as the HTTP method, URL, status code, response time, and more.
It's a handy tool during development to keep track of what's happening in your backend. 
You can customize the logging format and choose whether to log to the console, a file, or another destination. 
It's not necessary for the basic functioning of your MERN app, but it's a useful addition for debugging and monitoring purposes.


// What does CORS package do?
Sol : This is done to avoid Cross Origin Error .

//Why does Cross Origin Error occurs?
Sol : Agr aap ek server se dusre ko connect krenge jaise ki humare paas ek port 8080 hai aur dusra port 3000 hai toh ho sakta hai ki connect krte time 
koi origin se related error aa jaye. Is cheez ko prevent krne ke liye hum CORS package install krte hain.

//React-helmet
-> This is used for SEO i.e Search Engine Optimisation. Using this we can create reusable meta tags

// SEE useState of Ajay Juneja on Youtube

// Register Page me hum frontend pe saara data dete hain toh use server pe pahunchana hoga by communicating with it. So to communicate with the server
we use axios package. By using axios package we frontend can communicate with backend.

//axios ek package hai node packet manager me (npm) . Ye package external url or api ko hit krne ka kaam krta hai. Jab hum apne app me hain toh
woh saari app ki urls ko internal url kahenge aur app ki bahar ki urls ko external urls kahenge.

What is axios?
Axios is lightweight package and used to make HTTP requests in any Javascript library like React,Angular or Vue. Axios make it easy to send
asynchronous HTTP requests to REST endpoints and perform CRUD operations. If you use Fetch method in Javascript , Axios is the "Easy to use" Version of Fetch.

What are the advantages of using axios over fetch?
Ans - In fetch we obtain the data in res and then we have to parse it in JSON but if we use axios we get the data already present in JSON format.
Eg: 
USING FETCH =>
const res=await fetch("https://jsonplaceholder.typicode.com/posts");
const data=await data.json();

//toastify package is for beautiful notifications

What is the use of useNavigate()?
Ans -> useNavigate tb use kiya jaata hai jb koi kaam pura ho jaaye aur phir user ko dusre page pe apne aap se redirect kr diya jaaye.
For eg = agr user signup krleta hai toh apne aap use login page pe redirect kr diya jaaya ya fir login ke baad user ko home page pe redirect kr diya jaaye apne aap.

Local Storage me JSON data support nahi krta isliye hum use string me convert krke daalte hain i.e stringify function use krte hain

Slugify - this replaces white spaces with replacement character.


What is the difference between req.params and req.body?
Ans -> req.params
req.params is for the route parameters, not your form data.
This property is an object containing properties mapped to the named route “parameters”. For example, if you have the route /user/:name, then the “name” property is available as req.params.name. This object defaults to {}.

req.body
Contains key-value pairs of data submitted in the request body. By default, it is undefined, and is populated when you use body-parsing middleware such as body-parser and multer.

Photo form data ki madad se aata hai ,agr hum directly access krenge toh woh string value de dega photo ki value nahi dega , iske liye hum 
ek package install krenge express-formidable ka. Is package ki madad se hum koi bhi file upload kr skte hain easily. See its documentation on npmjs for more clarity.


Full form of fs=file system

What is Props?
Props ka matlb hota hai property.Jo bhi attribute hum pass krenge woh humara component receive krega. Watch Ajay Suneja Props video for more clarity.

What is radio?
Radio buttons are common way to allow users to make a single seclection from a list of options.Since only one radio button can be selected
at a time (within the same group), each available choice must be its own item and label.

The estimatedDocumentCount() is a way to quickly get the number of documents a collection has.



# axios.defaults.headers.common["Authorization"] = auth?.token;
Explaination of above code :
axios.defaults.headers.common:

axios.defaults.headers.common is an object in Axios that allows you to set default headers for all HTTP requests made with Axios. These headers will be included in every request automatically.
["Authorization"] = auth?.token:

This line sets the "Authorization" header in the axios.defaults.headers.common object.
auth?.token is using optional chaining (?.) to access the token property of the auth object. This is a safeguard against potential auth being null or undefined.
Explanation:

The "Authorization" header is commonly used for sending authentication tokens or API keys in HTTP requests. It is a standard mechanism for conveying credentials to access protected resources.
Purpose:

By setting the "Authorization" header in axios.defaults.headers.common, you are providing a default authorization token that will be automatically included in the headers of every Axios request. This can be useful when working with APIs that require authentication.
Example:

For example, if you have a user authentication system and the user is logged in (auth object exists with a valid token), setting this default header ensures that every subsequent Axios request includes the user's authentication token without explicitly adding it to each request individually.
Note on Security:

Be cautious when setting default headers, especially when dealing with sensitive information like authentication tokens. Make sure to handle tokens securely and be aware that setting default headers may expose them to potential security risks.
In summary, the provided code sets a default "Authorization" header in Axios based on the authentication token (auth?.token). This can simplify the process of including authentication headers in multiple requests within an application.


Q) What is an authprovider(React)?
Soln -> AuthProvider is a term commonly used in the context of authentication in software development, particularly in the context of web applications. 
It typically refers to a component or module responsible for managing and providing authentication-related functionality within an application. 
The exact implementation and features of an AuthProvider can vary based on the specific technology stack and framework being used.
Here are a couple of common scenarios where you might encounter the term "AuthProvider":
React Context and Authentication:

In React applications, developers often use the Context API to manage state at the application level. 
An AuthProvider could be a custom React context provider that encapsulates the logic for handling user authentication. 
It may provide authentication state, user information, and methods for login, logout, etc.

// Example of a simple AuthProvider in React using Context API
import React, { createContext, useContext, useState } from 'react';

const AuthContext = createContext();

const AuthProvider = ({ children }) => {
  const [user, setUser] = useState(null);

  const login = (userData) => {
    // Logic to authenticate the user
    setUser(userData);
  };

  const logout = () => {
    // Logic to log out the user
    setUser(null);
  };

  return (
    <AuthContext.Provider value={{ user, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  return useContext(AuthContext);
};


Backend Authentication Providers:

In the context of server-side development, an AuthProvider might refer to a module or service responsible for handling authentication on the server. 
This could involve validating user credentials, generating authentication tokens, and managing user sessions.

// Example of a simple AuthProvider in a Node.js backend
const authenticateUser = (username, password) => {
  // Logic to authenticate the user
  // Return an authentication token if successful
};

const validateToken = (token) => {
  // Logic to validate the authentication token
  // Return user information if the token is valid
};

module.exports = {
  authenticateUser,
  validateToken,
};


# The JSON.parse() method takes a JSON-formatted string (jsonString) and converts it into a JavaScript object (personObject). 
Now, you can access the values in personObject as properties.It's important to note that the JSON string passed to JSON.parse() must be valid JSON; otherwise, a SyntaxError will be thrown. 
Additionally, be cautious when parsing untrusted JSON data from external sources, as it could potentially contain malicious code. Always validate and sanitize input data, and consider using a try...catch block to handle parsing errors gracefully.

# In Mongoose, which is an Object Data Modeling (ODM) library for MongoDB and Node.js, the populate method is used to replace specified paths in a document with documents from other collections. 
It helps in retrieving referenced documents and populating them into the result set.


# Agar hume date aur time se deal krna hai toh moment se achha package koi bhi nahi hai